// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Profile {
  profileId String @id
  userId    String @unique
  image     String
  bio       String @db.Text
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Password {
  passwordId     String @id
  userId         String @unique
  hashedPassword String
  user           User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Feedback {
  id      String @id
  userId  String @unique
  comment String @db.LongText
  star    Int
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PasswordReset {
  id        String   @id
  userId    String   @unique
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String         @id
  username        String         @unique
  email           String         @unique
  firstName       String
  lastName        String
  sourceInfo      String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  isEmailVerified EmailVerified  @default(FALSE)
  hashedPassword  Password?
  profile         Profile?
  role            Role           @default(USER)
  passwordReset   PasswordReset?
  sessions        Session[]
  feedback        Feedback[]
  courses         Course[]
}

model EmailVerificationCode {
  id        String   @id
  userId    String   @unique
  email     String   @unique
  code      String
  expiresAt DateTime
}

model Contact {
  id               String  @id
  firstName        String
  lastName         String
  email            String
  message          String  @db.Text
  isSendNewsLetter Boolean
}

model Course {
  id          String   @id
  userId      String
  title       String
  price       Float
  description String   @db.LongText
  image       String
  rating      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CommunityFeedback {
  id        String @id
  firstName String
  lastName  String
  jobTitle  String
  comments  String
}

enum Role {
  USER
  PARENT
  TUTOR
  STUDENT
  ADMIN
}

enum EmailVerified {
  FALSE
  TRUE
}
