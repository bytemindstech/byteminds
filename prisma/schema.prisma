// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Profile {
  profileId String        @id
  bio       String        @db.Text
  image     ProfileImage?
  userId    String        @unique
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Password {
  passwordId     String @id
  hashedPassword String
  userId         String @unique
  user           User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Feedback {
  id      String @id
  userId  String @unique
  comment String @db.LongText
  star    Int
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PasswordReset {
  id        String   @id
  expiresAt DateTime
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String         @id
  username        String         @unique
  email           String         @unique
  firstName       String
  lastName        String
  sourceInfo      String
  isEmailVerified Boolean        @default(false)
  role            Role           @default(USER)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  hashedPassword  Password?
  profile         Profile?
  passwordReset   PasswordReset?
  sessions        Session[]
  feedback        Feedback[]
  courses         Course[]
}

model EmailVerificationCode {
  id        String   @id
  userId    String   @unique
  email     String   @unique
  code      String
  expiresAt DateTime
}

model Contact {
  id               String  @id
  firstName        String
  lastName         String
  email            String
  message          String  @db.Text
  isSendNewsLetter Boolean
}

model Course {
  id          String       @id
  title       String
  price       Float
  description String       @db.LongText
  rating      String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  image       CourseImage?
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CommunityFeedback {
  id         String   @id
  name       String
  image      String
  location   String
  occupation String
  comment    String   @db.LongText
  createdAt  DateTime @default(now())
}

model InHouseTutor {
  id            String             @id
  name          String
  subjectTaught String
  bio           String             @db.LongText
  createdAt     DateTime           @default(now())
  image         InHouseTutorImage?
  socials       Social[]
}

model Social {
  id             String       @id
  facebook       String
  linkedIn       String
  tiktok         String
  inhouseTutorId String
  inhouseTutor   InHouseTutor @relation(fields: [inhouseTutorId], references: [id], onDelete: Cascade)
}

model CourseImage {
  id        String   @id
  key       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courseId  String   @unique
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model InHouseTutorImage {
  id             String       @id
  key            String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  inHouseTutorId String       @unique
  inHouseTutor   InHouseTutor @relation(fields: [inHouseTutorId], references: [id], onDelete: Cascade)
}

model ProfileImage {
  id        String   @id
  key       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  profileId String   @unique
  profile   Profile  @relation(fields: [profileId], references: [profileId], onDelete: Cascade)
}

enum Role {
  USER
  PARENT
  TUTOR
  STUDENT
  ADMIN
}
